---
layout: post
title:  "Resque Pool."
date:   2013-10-21 00:21:55
categories: jekyll update
---

<p>
Tint heavily relies on Resque for queuing jobs. We use around 15 queues for various jobs. Before using resque-pool, we used a shell script which starts the resque workers on a code deploy. I soon ran into many issues like monitoring the workers, killing the workers etc. This made me search for a better tool and resque-pool came to my rescue. Resque pool is a simple library to manage a bunch of resque workers. As listed in the README, it requires: <p>
<p><ul><li>
 A small configuration file</li>
<li> Can be used with god to monitor the process</li>
<li>Faster startup</li></ul>
</p>

<h3>Installing Resque-Pool</h3>
<pre>
<code>
	gem 'resque-pool'
</code>
</pre>

<h3>Configuration File</h3>
<p>Create a config file called resque-pool.yml as shown below</p>
<pre>
<code>
	production:
		  "worker_1": 2
		  "worker_2": 2
	development:
		  "worker_1": 2
		  "worker_2": 2		
</code>
</pre>
<h3>Rake task config</h3>
<p>Require the rake tasks (resque/pool/tasks) in your Rakefile, load your application environment, configure Resque as necessary, and configure resque:pool:setup to disconnect all open files and sockets in the pool manager and reconnect in the workers. </p>
<pre>
<code>
require 'resque/pool/tasks'
# this task will get called before resque:pool:setup
# and preload the rails environment in the pool manager
task "resque:setup" => :environment do
  # generic worker setup, e.g. Hoptoad for failed jobs
end
task "resque:pool:setup" do
  # close any sockets or files in pool manager
  ActiveRecord::Base.connection.disconnect!
  # and re-open them in the resque worker parent
  Resque::Pool.after_prefork do |job|
    ActiveRecord::Base.establish_connection
  end
end
</code>
</pre>

<h3>Start the pool manager</h3>
<pre><code>resque-pool --daemon --environment production
</code></pre>

<h3>Killing the resque workers</h3>
<p> Resque pool forks several different processes for executing the workers. To kill all the workers you just need to kill the parent resque-pool process. </p>
<pre><code>kill -9 pid
#pid = process id of the resque pool</code></pre> 

<h3>Monitoring your resque process using god</h3>
To be continued.